/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: wallmasterr (https://sketchfab.com/wallmasterr)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/tenhun-falling-spaceman-fanart-9fd80b6a259f41fd99e6f56eee686dc5
Title: Tenhun Falling spaceman (FanArt)
*/

import React, { useEffect, useRef, Suspense } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useMotionValue, useSpring } from "motion/react";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

function MillenniumFalconModel(props) {
  const group = useRef();
  const bulletsRef = useRef(new Array(16).fill(null));
  
  try {
    const { nodes, materials, animations } = useGLTF("/models/millennium_falcon.glb");
    const { actions } = useAnimations(animations, group);
    
    console.log("Millennium Falcon loaded successfully:", { nodes, materials, animations });
    
    // Check if nodes exist
    if (!nodes || Object.keys(nodes).length === 0) {
      console.warn("No nodes found in Millennium Falcon model, using fallback");
      throw new Error("No nodes in model");
    }
    
    // Enhance materials for better color visibility
    useEffect(() => {
      if (materials) {
        Object.values(materials).forEach((material) => {
          if (material.isMeshStandardMaterial) {
            // Safely set material properties
            try {
              material.metalness = Math.min(material.metalness || 0, 0.3);
              material.roughness = Math.max(material.roughness || 0.7, 0.7);
            } catch (error) {
              console.warn("Error setting material properties:", error);
            }
          }
        });
      }
    }, [materials]);
    
    useEffect(() => {
      if (animations && animations.length > 0) {
        actions[animations[0].name]?.play();
      }
    }, [actions, animations]);

    // Hovering animation - gentle left-right and up-down movement
    useFrame((state) => {
      if (group.current) {
        // Realistic flying motion - positioned in middle
        const time = state.clock.elapsedTime;
        
        // Complex left-right movement with varying speed
        group.current.position.x = 1.3 + 
          Math.sin(time * 0.7) * 0.4 + 
          Math.sin(time * 1.3) * 0.15;
        
        // Vertical hovering in middle of screen
        group.current.position.y = 0.2 + 
          Math.sin(time * 0.5) * 0.25 + 
          Math.cos(time * 0.9) * 0.1;
        
        // Realistic banking and pitch movements
        group.current.rotation.z = Math.sin(time * 0.6) * 0.08 + Math.cos(time * 1.1) * 0.03;
        group.current.rotation.x = Math.sin(time * 0.4) * 0.04;
        group.current.rotation.y = -Math.PI / 4 + Math.PI + Math.sin(time * 0.3) * 0.06;
        
        // Animate bullets
        bulletsRef.current.forEach((bullet, index) => {
          if (bullet) {
            bullet.position.z += 0.5; // Move bullets forward
            bullet.position.x += Math.sin(state.clock.elapsedTime * 2 + index) * 0.02; // Slight wobble
            
            // Reset bullet position when it goes too far
            if (bullet.position.z > 10) {
              bullet.position.z = 1 + (index % 6) * 0.5;
              bullet.position.x = 0.2 + (index % 6) * 0.1;
              bullet.position.y = 0;
            }
          }
        });
      }
    });

    return (
      <group
        ref={group}
        {...props}
        dispose={null}
        rotation={[0, -Math.PI / 4 + Math.PI, 0]}
        scale={props.scale || 0.274}
        position={props.position || [1.3, -1, 0]}
      >
        {/* Add lighting to the model */}
        <ambientLight intensity={0.6} />
        <directionalLight position={[5, 5, 5]} intensity={0.8} />
        <pointLight position={[2, 2, 2]} intensity={0.5} color="#ffffff" />
        
        {nodes.Scene ? (
          <primitive object={nodes.Scene} />
        ) : nodes.RootNode ? (
          <primitive object={nodes.RootNode} />
        ) : Object.values(nodes).length > 0 ? (
          <primitive object={Object.values(nodes)[0]} />
        ) : (
          <mesh>
            <boxGeometry args={[1, 0.5, 2]} />
            <meshBasicMaterial color="#CCCCCC" />
          </mesh>
        )}
        
        {/* Red laser bullets - More Visible */}
        {[...Array(6)].map((_, i) => (
          <mesh
            key={i}
            ref={(el) => (bulletsRef.current[i] = el)}
            position={[
              0.2 + i * 0.1,
              0,
              1 + i * 0.5
            ]}
          >
            <cylinderGeometry args={[0.05, 0.05, 0.4]} />
            <meshBasicMaterial 
              color="#FF0000"
            />
          </mesh>
        ))}
        
        {/* Bullet trails for better visibility */}
        {[...Array(6)].map((_, i) => (
          <mesh
            key={`trail-${i}`}
            ref={(el) => (bulletsRef.current[i + 6] = el)}
            position={[
              0.2 + i * 0.1,
              0,
              1 + i * 0.5
            ]}
          >
            <cylinderGeometry args={[0.08, 0.08, 0.3]} />
            <meshBasicMaterial 
              color="#FF6666" 
              transparent={true}
              opacity={0.6}
            />
          </mesh>
        ))}
      </group>
    );
  } catch (error) {
    console.error("Error loading Millennium Falcon, using fallback:", error);
    return <FallbackSpaceship {...props} />;
  }
}

function FallbackSpaceship(props) {
  const group = useRef();
  const bulletsRef = useRef(new Array(16).fill(null));
  
  // Realistic flying animation - same as main model
  useFrame((state) => {
    if (group.current) {
      // Realistic flying motion - positioned in middle
      const time = state.clock.elapsedTime;
      
      // Complex left-right movement with varying speed
      group.current.position.x = 1.3 + 
        Math.sin(time * 0.7) * 0.4 + 
        Math.sin(time * 1.3) * 0.15;
      
      // Vertical hovering in middle of screen
      group.current.position.y = 0.2 + 
        Math.sin(time * 0.5) * 0.25 + 
        Math.cos(time * 0.9) * 0.1;
      
      // Realistic banking and pitch movements
      group.current.rotation.z = Math.sin(time * 0.6) * 0.08 + Math.cos(time * 1.1) * 0.03;
      group.current.rotation.x = Math.sin(time * 0.4) * 0.04;
      group.current.rotation.y = Math.sin(time * 0.3) * 0.06;
      
      // Animate bullets
      bulletsRef.current.forEach((bullet, index) => {
        if (bullet) {
          bullet.position.z += 0.4;
          bullet.position.y += Math.sin(state.clock.elapsedTime * 3 + index) * 0.03;
          
          if (bullet.position.z > 8) {
            bullet.position.z = -1 - (index % 8) * 0.3;
            bullet.position.x = Math.random() * 0.6 - 0.3;
            bullet.position.y = Math.random() * 0.3 - 0.15;
          }
        }
      });
    }
  });

  return (
    <group
      ref={group}
      {...props}
      scale={props.scale || 0.5}
      position={props.position || [1.3, 0.2, 0]}
    >
      {/* Add lighting for better visibility */}
      <ambientLight intensity={0.8} />
      <directionalLight position={[5, 5, 5]} intensity={1.0} />
      <pointLight position={[2, 2, 2]} intensity={0.8} color="#ffffff" />
      
      {/* Main body - Millennium Falcon style */}
      <mesh rotation={[0, 0, Math.PI / 2]}>
        <cylinderGeometry args={[0.8, 1.2, 0.4, 6]} />
        <meshBasicMaterial color="#F0F0F0" />
      </mesh>
      
      {/* Central disc */}
      <mesh>
        <cylinderGeometry args={[0.6, 0.6, 0.2, 16]} />
        <meshBasicMaterial color="#FFFFFF" />
      </mesh>
      
      {/* Cockpit - offset to the right like Millennium Falcon */}
      <mesh position={[0.8, 0.15, 0]}>
        <sphereGeometry args={[0.3]} />
        <meshBasicMaterial color="#D0D0D0" />
      </mesh>
      
      {/* Cockpit window */}
      <mesh position={[0.9, 0.2, 0]}>
        <sphereGeometry args={[0.15]} />
        <meshBasicMaterial color="#87CEEB" />
      </mesh>
      
      {/* Forward mandibles - characteristic Millennium Falcon shape */}
      <mesh position={[-0.6, 0, 0.6]} rotation={[0, 0, 0.2]}>
        <boxGeometry args={[1.2, 0.3, 0.25]} />
        <meshBasicMaterial color="#F0F0F0" />
      </mesh>
      <mesh position={[-0.6, 0, -0.6]} rotation={[0, 0, -0.2]}>
        <boxGeometry args={[1.2, 0.3, 0.25]} />
        <meshBasicMaterial color="#F0F0F0" />
      </mesh>
      
      {/* Mandible tips */}
      <mesh position={[-1.1, 0, 0.7]}>
        <boxGeometry args={[0.3, 0.2, 0.15]} />
        <meshBasicMaterial color="#E0E0E0" />
      </mesh>
      <mesh position={[-1.1, 0, -0.7]}>
        <boxGeometry args={[0.3, 0.2, 0.15]} />
        <meshBasicMaterial color="#E0E0E0" />
      </mesh>
      
      {/* Rear engines */}
      <mesh position={[0.8, 0, 0]}>
        <cylinderGeometry args={[0.1, 0.15, 0.4]} />
        <meshBasicMaterial color="#4169E1" />
      </mesh>
      
      {/* Engine glow effects */}
      <mesh position={[1.0, 0, 0]}>
        <cylinderGeometry args={[0.05, 0.1, 0.2]} />
        <meshBasicMaterial color="#00BFFF" />
      </mesh>
      
      {/* Add some detail lines in gray */}
      <mesh position={[0, 0, 0]}>
        <torusGeometry args={[0.9, 0.02, 8, 16]} />
        <meshBasicMaterial color="#CCCCCC" />
      </mesh>
      
      {/* Red laser bullets for fallback */}
      {[...Array(6)].map((_, i) => (
        <mesh
          key={i}
          ref={(el) => (bulletsRef.current[i] = el)}
          position={[
            Math.random() * 0.4 - 0.2,
            Math.random() * 0.2 - 0.1,
            -2 - i * 0.5
          ]}
        >
          <cylinderGeometry args={[0.02, 0.02, 0.2]} />
          <meshBasicMaterial color="#FF0000" />
        </mesh>
      ))}
    </group>
  );
}

export function Astronaut(props) {
  // Use fallback spaceship as primary since 3D model has compatibility issues
  const [useModel, setUseModel] = React.useState(false);
  
  // For now, use the reliable fallback spaceship
  // The 3D model has GLTF extension compatibility issues in production
  return <FallbackSpaceship {...props} />;
  
  // Uncomment below to try loading the 3D model again
  /*
  return (
    <Suspense fallback={<FallbackSpaceship {...props} />}>
      <MillenniumFalconModel {...props} />
    </Suspense>
  );
  */
}

// Preload the Millennium Falcon model with error handling
try {
  useGLTF.preload("/models/millennium_falcon.glb");
  console.log("Millennium Falcon model preload initiated");
} catch (error) {
  console.warn("Millennium Falcon model not available for preload:", error);
}
